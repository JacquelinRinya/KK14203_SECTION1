import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.BufferedWriter;
import java.io.BufferedReader;
import java.io.IOException;

import java.util.ArrayList;

abstract class Cake{
   String name;
   String[] tpg;
   String[] tOrder;
   double Small;
   double Medium;
   double Big;
   double total;
   int size;
   int qnty;
   
   Cake(String name){this.name=name;}
   
   abstract void setCake(String[] t, double ps, double pm, double pb);
     
   
   public void cakeOrder(String[] to, int q, int s){
      tOrder = to;
      qnty = q;
      size = s;
   }
   
   public double getSizePrice(){
      double sprice=0.0;
      if(size==1) sprice = Small;
      else if(size==2) sprice = Medium;
      else if(size==3) sprice = Big;
      
      return sprice;
   }
   
   public double getTotalPrice(){
      total = getSizePrice();
      total *= qnty;
      total += (tOrder.length*10);
      return total;  
   }
   
   public int getQuantity(){
      return qnty;  
   }
   
   public String getSize(){
      String size_str="";
      if(size==1) size_str="Small";
      else if (size==2) size_str="Medium";
      else if (size==3) size_str="Large";
      return size_str;
   }
   
   public void printCake(){
      System.out.println("-----------------------------");
      System.out.println("           Cake Menu");
      System.out.println("-----------------------------");
      System.out.println(name + " Cake with available toppings:");
      for(int i=0; i<tpg.length; i++){
         System.out.println(i+1 + ") " + tpg[i]);
      } 
      System.out.println("\nPrice:");
      System.out.println("[1] Small : RM" + Small);
      System.out.println("[2] Medium: RM" + Medium);
      System.out.println("[3] Big   : RM" + Big);
   }
   
   //local print order to console
   public void printOrder(){
      System.out.println("\n\nCake Order detail:");
      System.out.println("-------------------------------------------");
      System.out.print("Topping Order: ");
      for(int i=0; i<tOrder.length; i++){
         System.out.print(i+1 + ") " + tOrder[i] + " ");
      } 
      System.out.println("\nSize    : " + getSize());
      System.out.println("-------------------------------------------");
      System.out.println("Total Price: RM" + getTotalPrice()); 
      System.out.println("-------------------------------------------"); 
   } 
   
   //return print order to GUI call
   public String printOrder_GUI(){
      String txt = "\n\nCake Order detail:\n";
      txt += "-------------------------------------------\n";
      txt += "Topping Order: \n";
      for(int i=0; i<tOrder.length; i++){
         txt += "(" + (i+1) + ") " + tOrder[i] + " \n";
      } 
      txt += "\nSize        : " + getSize() + "\n";
      txt += "Quantity : " + getQuantity() + "\n";
      txt += "-------------------------------------------\n";
      txt += "Total Price: RM" + getTotalPrice() + "\n"; 
      txt += "-------------------------------------------\n"; 
      return txt;
   }      
}

   
class BlackForest extends Cake{
 
   BlackForest(String name){
      super(name);
   }
   
   void setCake(String[] topping, double priceSmall, double priceMedium, double priceBig){
      this.tpg = topping;
      this.Small = priceSmall;
      this.Medium = priceMedium;
      this.Big = priceBig;
   }
}



class FormPanel extends JPanel implements ActionListener{
   JButton btnOrder;
   JButton btnAdd;
   JLabel jclabel;
   JTextArea jt1;
   JTextArea jt2;
   JComboBox jcb;
   JLabel jcomp2;
   static BlackForest cake;
   static ArrayList<String> order;
   
   
   String filePath = "data.txt";

   public FormPanel() {
      String[] jcbItems = {"[Select]"};
   
      jclabel = new JLabel ("Cake Menu");
      btnOrder = new JButton ("Order");
      btnAdd = new JButton ("Add Topping");
      jt1 = new JTextArea (5, 5);
      jt2 = new JTextArea (5, 5);
      JScrollPane jt1_sp = new JScrollPane(jt1);
      JScrollPane jt2_sp = new JScrollPane(jt2);
      jcb = new JComboBox (jcbItems);
      jcomp2 = new JLabel ("Selection:");
      
      btnAdd.addActionListener(this);
      btnOrder.addActionListener(this);
   
      setPreferredSize (new Dimension (500, 670));
      setLayout (null);
   
      add (btnAdd);
      add (btnOrder);
      add (jt1_sp);
      add (jt2_sp);
      add (jcb);
      add (jcomp2);
      add (jclabel);
   
      btnAdd.setBounds (360, 295, 120, 30);
      btnOrder.setBounds(360, 335, 120, 30);
      jt2_sp.setBounds (10, 10, 480, 260);
      jt1_sp.setBounds (10, 400, 480, 250);
      jcb.setBounds (250, 295, 100, 30);
      jcomp2.setBounds (80, 295, 100, 30);
      jclabel.setBounds (220, 150, 150, 70);
   }
   
   public void DisplayMenu(){
   
      String[] topping = {"Chocolate", "Cherries", "Whipped Cream"};
      String text = ("-----------------------------\n");
      text += "         Menu\n";
      text += "-----------------------------\n";
      text += "Available toppings:\n";
      for(int i=0; i<topping.length; i++){
         text += "\n" + (i+1) + ")  " + topping[i] + "\n";
      } 
      text += "\nPrice:\n";
      text += "[1] Small : RM45.0 \n";
      text += "[2] Medium: RM65.0 \n";
      text += "[3] Big   : RM80.0 \n";
      jt2.append(text);
   }
   
   public void actionPerformed(ActionEvent ae){
      String command = ae.getActionCommand(); 
      
      if(command.equals("Add Topping")){
         order.add(jcb.getSelectedItem().toString());      
         jt1.append(jcb.getSelectedItem().toString() + "\n");   
      }
      else if(command.equals("Order")){
         String str_order[] = new String[order.size()]; 
       
         for (int j = 0; j < order.size(); j++) {  
            str_order[j] = order.get(j); 
         }
        
         cake.cakeOrder(str_order, 1, 2);
         String txt = cake.printOrder_GUI();
         jt1.append(txt);
         saveData();
      }    
   }

   public void saveData(){
      File file = new File(filePath);
      FileWriter fr = null;
      BufferedWriter br = null;
      PrintWriter pr = null;
      
      String String = "";
      String str_order[] = new String[order.size()];
      for(int i=0; i < order.size(); i++){
         str_order[i] = order.get(i);
         String += str_order[i] + ", ";
      }
      String += "Size: " + cake.getSize();
      String += ", Quantity: " + (String.valueOf(cake.qnty));
      String += ", Total Price: " + (String.valueOf(cake.getTotalPrice()));
      
      try {
         fr = new FileWriter(file, true);
         br = new BufferedWriter(fr);
         pr = new PrintWriter(br);
         pr.println(String);
      } catch (IOException e) {			
         jt1.setText(e.toString());
      } finally {
         try {
            pr.close();
            br.close();
            fr.close();
         } catch (IOException e) {
            jt1.setText(e.toString());
         }
      }
   }
   
   public void updateCB(String[] topping){
      for(int i=0; i<topping.length; i++){
         jcb.addItem(topping[i]);
      }      
   }

}



public class CakeApps{
   public static void main (String[] args) {
      FormPanel blackforestcake = new FormPanel();
      blackforestcake.cake = new BlackForest("Generic Cake");
      blackforestcake.order = new ArrayList<String>();
      
      
      JFrame frame = new JFrame ("MyPanel");
      String[] topping = {"Chocolate", "Cherries", "Whipped Cream"};
      blackforestcake.cake.setCake(topping, 45.00, 65.00, 80.00); 
      blackforestcake.DisplayMenu();
      
      blackforestcake.updateCB(topping);
      
      frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
      frame.getContentPane().add (blackforestcake);
      frame.pack();
      frame.setVisible (true);
   }
}


